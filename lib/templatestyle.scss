$responsive: true !default;
$mobile-first: true !default;
$gutter: 8px !default;

$black: #000;
$charcoal: #2a2a2a;
$concrete: #777;
$gray: #252525;
$guidance-red: #af372a;
$idcta-blue: #85bae6;
$idcta-dark-blue: #2576c9;
$magenta: #f54997;
$night: #1e1e1e;
$platinum: #eee;
$raspberry: #cf3e80;
$silver: #bbb;
$stone: #444;
$store-blue: #00bcec;
$storm: #333;
$white: #fff;

$ie: false;

$breakpoint1-max-value: 400px;
$breakpoint2-max-value: 600px;
$breakpoint3-max-value: 1008px;

// 32px is the gutters either side
$breakpoint4-content-width: $breakpoint3-max-value - 32px;

$breakpoint1: 'only screen and (max-width:#{$breakpoint1-max-value - 1})';
$breakpoint2: 'only screen and (min-width:#{$breakpoint1-max-value}) and (max-width:#{$breakpoint2-max-value - 1})';
$breakpoint3: 'only screen and (min-width:#{$breakpoint2-max-value}) and (max-width:#{$breakpoint3-max-value - 1})';
$breakpoint4: 'only screen and (min-width:#{$breakpoint3-max-value})';

$breakpoint2-gte: 'only screen and (min-width:#{$breakpoint1-max-value})';
$breakpoint3-gte: 'only screen and (min-width:#{$breakpoint2-max-value})';

$breakpoint1-lte: 'only screen and (max-width:#{$breakpoint1-max-value - 1})';
$breakpoint2-lte: 'only screen and (max-width:#{$breakpoint2-max-value - 1})';
$breakpoint3-lte: 'only screen and (max-width:#{$breakpoint3-max-value - 1})';

@mixin bp($breakpoint) {
    @if $breakpoint == 1 and $ie == false {
        @media #{$breakpoint1} { @content; }
    }

    @if $breakpoint == 2 and $ie == false {
        @media #{$breakpoint2} { @content; }
    }

    @if $breakpoint == 3 and $ie == false {
        @media #{$breakpoint3} { @content; }
    }

    @if $breakpoint == 4 {
        @if $ie == false {
            @media #{$breakpoint4} { @content; }
        } @else {
            @content;
        }
    }
}

@mixin bp-gte($breakpoint) {

    @if $breakpoint == 2 {
        @if $ie == false {
            @media #{$breakpoint2-gte} { @content; }
        } @else {
            @content;
        }
    }

    @if $breakpoint == 3 {
        @if $ie == false {
            @media #{$breakpoint3-gte} { @content; }
        } @else {
            @content;
        }
    }
}

.bp {
    &--show-gte3 {
        display: none;

        @include bp-gte(3) {
            display: block;
        }
    }

    &--hide-gte3 {
        display: block;

        @include bp-gte(3) {
            display: none;
        }
    }

    &--show-gte4 {
        display: none;

        @include bp(4) {
            display: block;
        }
    }

    &--hide-gte4 {
        display: block;

        @include bp(4) {
            display: none;
        }
    }
}

@mixin bp-lte($breakpoint) {
    @if $breakpoint == 1 {
        @if $ie == false {
            @media #{$breakpoint1-lte} { @content; }
        }
    }

    @if $breakpoint == 2 {
        @if $ie == false {
            @media #{$breakpoint2-lte} { @content; }
        }
    }

    @if $breakpoint == 3 {
        @if $ie == false {
            @media #{$breakpoint3-lte} { @content; }
        }
    }
}

@mixin shown-from-breakpoint-3 {
    display: none;
    @include bp-gte(3) { display: block; }
}

@mixin hidden-from-breakpoint-3 {
    @include bp-gte(3) { display: none; }
}

@mixin shown-on-breakpoint-4 {
    display: none;
    @include bp(4) { display: block; }
}

@mixin hidden-on-breakpoint-4 {
    @include bp(4) { display: none; }
}


.typo {
    font-family: Arial, Helvetica;
    font-weight: normal;
    font-style: normal;

    &--robin {
        font-size: 11px;
        line-height: 1.45;

        @include bp-gte(3) {
            font-size: 11px;
            line-height: 1.45;
        }
    }

    &--bullfinch {
        font-size: 13px;
        line-height: 1.23;

        @include bp-gte(2) {
            font-size: 14px;
            line-height: 1.14;
        }

        @include bp-gte(3) {
            font-size: 13px;
            line-height: 1.23;
        }
    }

    &--canary {
        font-size: 15px;
        line-height: 1.2;

        @include bp-gte(2) {
            font-size: 16px;
            line-height: 1.25;
        }

        @include bp-gte(3) {
            font-size: 14px;
            line-height: 1.28;
        }
    }

    &--skylark {
        font-size: 15px;
        line-height: 1.33;

        @include bp-gte(2) {
            font-size: 16px;
            line-height: 1.375;
        }

        @include bp-gte(3) {
            font-size: 16px;
            line-height: 1.375;
        }
    }

    &--goose {
        font-size: 18px;
        line-height: 1.11;

        @include bp-gte(2) {
            font-size: 20px;
            line-height: 1.2;
        }

        @include bp-gte(3) {
            font-size: 20px;
            line-height: 1;
        }
    }

    &--heron {
        font-size: 20px;
        line-height: 1.2;

        @include bp-gte(3) {
            font-size: 24px;
            line-height: 1.2;
        }
    }

    &--buzzard {
        font-size: 24px;
        line-height: 1;

        @include bp-gte(2) {
            font-size: 24px;
            line-height: 1.16;
        }

        @include bp-gte(3) {
            font-size: 32px;
            line-height: 1;
        }
    }

    &--eagle {
        font-size: 36px;
        line-height: 1.11;

        @include bp-gte(2) {
            font-size: 40px;
            line-height: 1.15;
        }

        @include bp-gte(3) {
            font-size: 46px;
            line-height: 1.17;
        }
    }
}


// Mixins and functions from Compass
// Mixins
@mixin adjust-font-size-to($to-size, $lines: lines-for-font-size($to-size), $from-size: $base-font-size) {
    font-size: 1em * $to-size / $from-size;
    line-height: rhythm($lines, $to-size);
}

// scss-lint:disable DuplicateProperty
@mixin background-image($image) {
    background-image: #{-webkit-}#{$image};
    background-image: #{-moz-}#{$image};
    background-image: #{-o-}#{$image};
    background-image: #{-ms-}#{$image};
    background-image: $image;
}
// scss-lint:enable DuplicateProperty

@mixin clearfix {
    overflow: hidden;
    @if $ie {
        .ie7 & {
            zoom: 1;
        }
    }
}

// Better clearfix method withou the use of overflow: hidden;
@mixin clearfloats {
    @if $ie {
        .ie7 & {
            zoom: 1;
        }
    }

    &:before,
    &:after {
        content: ' ';
        display: table;
    }

    &:after {
        clear: both;
    }
}

@mixin filter-gradient($start-color, $end-color, $orientation: vertical) {
    $gradient-type: if($orientation == vertical, 0, 1);
    filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');

    @if $ie {
        .ie7 & {
            zoom: 1;
        }
    }
}

@mixin inline-block($alignment: middle) {
    display: -moz-inline-stack;
    display: inline-block;
    vertical-align: $alignment;

    zoom: 1;
    @if $ie {
        .ie7 & {
            vertical-align: auto;
            display: inline;
        }
    }
}

@mixin opacity($opacity) {
    @if $ie {
        filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    }

    opacity: $opacity;
}

@mixin experimental($property, $value, $moz: true, $webkit: true, $o: true, $ms: true, $khtml: false, $official: true) {
    @if type-of($value) == string {
        $value: unquote($value);
    }
    @if $webkit {
        -webkit-#{$property}: $value;
    }

    @if $khtml {
        -khtml-#{$property}: $value;
    }

    @if $moz {
        -moz-#{$property}: $value;
    }

    @if $ms {
        -ms-#{$property}: $value;
    }

    @if $o {
        -o-#{$property}: $value;
    }

    @if $official {
        #{$property}: $value;
    }
}


// Functions
@function lines-for-font-size($font-size) {
    $lines: ceil($font-size / $base-line-height);
    @if $lines * $base-line-height - $font-size < 2px * 2 {
        $lines: $lines + 1;
    }

    @return $lines;
}

@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {
    $rhythm: 1em * ($lines * $base-line-height - $offset) / $font-size;
    // Round the pixels down to nearest integer.
    @if unit($rhythm) == px {
        $rhythm: floor($rhythm);
    }

    @return $rhythm;
}

$breakpoint-keys: 'g2', 'g3', 'g4';
$breakpoint-values: "(min-width: #{$breakpoint1-max-value})", "(min-width: #{$breakpoint2-max-value})", "(min-width: #{$breakpoint3-max-value})";

$breakpoint-has-widths: 'g2', 'g3', 'g4' !default;

@mixin grid-media-query($media-query) {
    $breakpoint-found: false;

    @for $i from 1 through length($breakpoint-keys) {
      $name: nth($breakpoint-keys, $i);
      $declaration: nth($breakpoint-values, $i);

      @if $media-query == $name {
          $breakpoint-found: true;

          @media only screen and #{$declaration} {
              @content;
          }
      }
    }
}

.grid {
    &--with-gutters {
        .grid__row {
            margin-right: -($gutter);
            margin-left: -($gutter);
        }

        .grid__item {
            padding-right: $gutter;
            padding-left: $gutter;
        }
    }

    &--no-gutters {
        .grid__row {
            margin-right: 0;
            margin-left: 0;
        }

        .grid__item {
            padding-right: 0;
            padding-left: 0;
        }
    }

    &,
    &__row {
        min-width: 100%;
        display: block;
        @include clearfloats;
    }

    &__item {
        @if $mobile-first {
            width: 100%;
        }
        float: left;
        display: block;
        -webkit-box-sizing: border-box;
           -moz-box-sizing: border-box;
                box-sizing: border-box;
    }
}

@mixin device-type($namespace: '') {
    $prefix: '.' + $namespace;

    #{$prefix}hide { display: none; }
    #{$prefix}show { display: block; }

    #{$prefix}one-whole { width: 100%; }

    #{$prefix}one-half { width: 50%; }

    #{$prefix}one-third { width: 33.333%; }
    #{$prefix}two-thirds { width: 66.666%; }

    #{$prefix}one-quarter { width: 25%; }
    #{$prefix}two-quarters { @extend #{$prefix}one-half; }
    #{$prefix}three-quarters { width: 75%; }

    #{$prefix}one-fifth { width: 20%; }
    #{$prefix}two-fifths { width: 40%; }
    #{$prefix}three-fifths { width: 60%; }
    #{$prefix}four-fifths { width: 80%; }

    #{$prefix}one-sixth { width: 16.666%; }
    #{$prefix}two-sixths { @extend #{$prefix}one-third; }
    #{$prefix}three-sixths { @extend #{$prefix}one-half; }
    #{$prefix}four-sixths { @extend #{$prefix}two-thirds; }
    #{$prefix}five-sixths { width: 83.333%; }

    #{$prefix}one-eighth { width: 12.5%; }
    #{$prefix}two-eighths { @extend #{$prefix}one-quarter; }
    #{$prefix}three-eighths { width: 37.5%; }
    #{$prefix}four-eighths { @extend #{$prefix}one-half; }
    #{$prefix}five-eighths { width: 62.5%; }
    #{$prefix}six-eighths { @extend #{$prefix}three-quarters; }
    #{$prefix}seven-eighths { width: 87.5%; }

    #{$prefix}one-tenth { width: 10%; }
    #{$prefix}two-tenths { @extend #{$prefix}one-fifth; }
    #{$prefix}three-tenths { width: 30%; }
    #{$prefix}four-tenths { @extend #{$prefix}two-fifths; }
    #{$prefix}five-tenths { @extend #{$prefix}one-half; }
    #{$prefix}six-tenths { @extend #{$prefix}three-fifths; }
    #{$prefix}seven-tenths { width: 70%; }
    #{$prefix}eight-tenths { @extend #{$prefix}four-fifths; }
    #{$prefix}nine-tenths { width: 90%; }

    #{$prefix}one-twelfth { width: 8.333%; }
    #{$prefix}two-twelfths { @extend #{$prefix}one-sixth; }
    #{$prefix}three-twelfths { @extend #{$prefix}one-quarter; }
    #{$prefix}four-twelfths { @extend #{$prefix}one-third; }
    #{$prefix}five-twelfths { width: 41.666%; }
    #{$prefix}six-twelfths { @extend #{$prefix}one-half; }
    #{$prefix}seven-twelfths { width: 58.333%; }
    #{$prefix}eight-twelfths { @extend #{$prefix}two-thirds; }
    #{$prefix}nine-twelfths { @extend #{$prefix}three-quarters; }
    #{$prefix}ten-twelfths { @extend #{$prefix}five-sixths; }
    #{$prefix}eleven-twelfths { width: 91.666%; }
}

@include device-type;

@if $responsive {
    @each $name in $breakpoint-has-widths {
        @if $ie {
            @include device-type('#{$name}--');
        } @else {
            @include grid-media-query($name) {
               @include device-type('#{$name}--');
            }
        }
    }
}

@mixin linkVisited {
    &:link,
    &:visited {
        @content;
    }
}

@mixin hoverActiveFocus {
    &:focus,
    &:hover,
    &:active {
        @content;
    }
}

@mixin hoverActiveFocusClass($hoverClass) {
    &#{$hoverClass},
    &:focus,
    &:hover,
    &:active {
        @content;
    }
}

@mixin touch {
  body.touch & {
      @content;
    }
}

@mixin wp8 {
    body.wp8 & {
        @content;
    }
}

@mixin animateColor {
    @include experimental(transition, 'color 0.2s ease-out', -moz, -webkit, -o, not -ms, not -khtml, official);
}
